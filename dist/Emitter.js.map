{"version":3,"file":"Emitter.js","sources":["../src/Emitter.ts"],"sourcesContent":["\r\ninterface IEmitterEvent {\r\n\tfunc: Function,\r\n\tonce: boolean\r\n}\r\n\r\ntype EmitterEvents = IEmitterEvent[];\r\n\r\n/**\r\n * @interface IEmitterEvent\r\n * @memberof Emitter~\r\n * @property func {Function}\r\n * @property once {boolean}\r\n */\r\n\r\n/**\r\n * @typedef EmitterEvents {Emitter~IEmitterEvent[]}\r\n * @memberof Emitter~\r\n */\r\n \r\n\r\n/**\r\n * @class\r\n */\r\nexport default class Emitter {\r\n\t/**\r\n\t * @member {Object<string, Emitter~EmitterEvents>}\r\n\t * @private\r\n\t */\r\n\tprivate _events: { [type: string]: EmitterEvents } = {};\r\n\t\r\n\t/**\r\n\t * Register event.\r\n\t * \r\n\t * @private\r\n\t * @param {string} type Event type.\r\n\t * @param {Function} func Callback when the event fires.\r\n\t * @param {boolean} once Whether one-time event.\r\n\t * @return {Emitter} Returns itself for the method chaining.\r\n\t */\r\n\tprivate _on(type: string, func: Function, once: boolean): Emitter {\r\n\t\tif (!type || !func) {\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\t\r\n\t\tconst events: EmitterEvents = this._events[type] = this._events[type] || [];\r\n\t\t\r\n\t\tfor (let i: number = 0; i < events.length; i++) {\r\n\t\t\tif (events[i].func === func) {\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tevents.push({ func, once });\r\n\t\t\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Register event.\r\n\t * \r\n\t * @param {string} type Event type.\r\n\t * @param {Function} func Callback when the event fires.\r\n\t * @return {Emitter} Returns itself for the method chaining.\r\n\t */\r\n\ton(type: string, func: Function): Emitter {\r\n\t\treturn this._on(type, func, false);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Register one-time event.\r\n\t * \r\n\t * @param {string} type Event type.\r\n\t * @param {Function} func Callback when the event fires.\r\n\t * @return {Emitter} Returns itself for the method chaining.\r\n\t */\r\n\tonce(type: string, func: Function): Emitter {\r\n\t\treturn this._on(type, func, true);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Unregister event.\r\n\t * \r\n\t * @param {string} type Event type.\r\n\t * @param {Function} func Registered callback.\r\n\t * @return {Emitter} Returns itself for the method chaining.\r\n\t */\r\n\toff(type: string, func: Function): Emitter {\r\n\t\tif (!type || !func) {\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\t\r\n\t\tconst events: EmitterEvents = this._events[type] || [];\r\n\t\t\r\n\t\tfor (let i: number = 0; i < events.length; i++) {\r\n\t\t\tif (events[i].func === func) {\r\n\t\t\t\tevents.splice(i, 1);\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Emit event.\r\n\t * \r\n\t * @param {string} type Event type to emit.\r\n\t * @param {...any} [args] Argument(s) in callback.\r\n\t * @return {Emitter} Returns itself for the method chaining.\r\n\t */\r\n\temit(type: string, ...args: any[]): Emitter {\r\n\t\tif (!type) {\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\t\r\n\t\tconst events: EmitterEvents = this._events[type] || [];\r\n\t\tconst use: EmitterEvents = [];\r\n\t\t\r\n\t\tfor (let i: number = events.length - 1; i >= 0; i--) {\r\n\t\t\tconst ev: IEmitterEvent = events[i];\r\n\t\t\t\r\n\t\t\tif (ev.once) {\r\n\t\t\t\tevents.splice(i, 1);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tuse.push(ev);\r\n\t\t}\r\n\t\t\r\n\t\tfor (let i: number = use.length - 1; i >= 0; i--) {\r\n\t\t\tuse[i].func.apply(this, args);\r\n\t\t}\r\n\t\t\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Emit event with specifying a context.\r\n\t * \r\n\t * @param {string} type Event type to emit.\r\n\t * @param {any} context 'this' context in callback.\r\n\t * @param {...any} [args] Argument(s) in callback.\r\n\t * @return {Emitter} Returns itself for the method chaining.\r\n\t */\r\n\tcemit(type: string, context: any, ...args: any[]): Emitter {\r\n\t\tif (!type || context == null) {\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\t\r\n\t\tconst events: EmitterEvents = this._events[type] || [];\r\n\t\tconst use: EmitterEvents = [];\r\n\t\t\r\n\t\tfor (let i: number = events.length - 1; i >= 0; i--) {\r\n\t\t\tconst ev: IEmitterEvent = events[i];\r\n\t\t\t\r\n\t\t\tif (ev.once) {\r\n\t\t\t\tevents.splice(i, 1);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tuse.push(ev);\r\n\t\t}\r\n\t\t\r\n\t\tfor (let i: number = use.length - 1; i >= 0; i--) {\r\n\t\t\tuse[i].func.apply(context, args);\r\n\t\t}\r\n\t\t\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Remove events grouped event type.\r\n\t * \r\n\t * @param {string} [type=''] Event type to remove.<br>If it is empty, removes all events.\r\n\t * @return {Emitter} Returns itself for the method chaining.\r\n\t */\r\n\tclear(type: string = ''): Emitter {\r\n\t\tif (this._events[type]) {\r\n\t\t\tthis._events[type] = [];\r\n\t\t} else {\r\n\t\t\tthis._events = {};\r\n\t\t}\r\n\t\t\r\n\t\treturn this;\r\n\t}\r\n}"],"names":["Emitter","this","_on","type","func","once","const","events","_events","let","i","length","push","on","off","splice","emit","use","ev","apply","args","cemit","context","clear"],"mappings":";;;;;;;;QAwBqBA,UAArB;QAKSC,eAA6C;;sBAW7CC,mBAAIC,MAAcC,MAAgBC;QACzC,KAAKF,SAASC;YACb,OAAOH;;QAGRK,IAAMC,SAAwBN,KAAKO,QAAQL,QAAQF,KAAKO,QAAQL,SAAS;QAEzE,KAAKM,IAAIC,IAAY,GAAGA,IAAIH,OAAOI,QAAQD;YAC1C,IAAIH,OAAOG,GAAGN,SAASA;gBACtB,OAAOH;;;QAITM,OAAOK,KAAK;kBAAER;kBAAMC;;QAEpB,OAAOJ;;sBAURY,iBAAGV,MAAcC;QAChB,OAAOH,KAAKC,IAAIC,MAAMC,MAAM;;sBAU7BC,qBAAKF,MAAcC;QAClB,OAAOH,KAAKC,IAAIC,MAAMC,MAAM;;sBAU7BU,mBAAIX,MAAcC;QACjB,KAAKD,SAASC;YACb,OAAOH;;QAGRK,IAAMC,SAAwBN,KAAKO,QAAQL,SAAS;QAEpD,KAAKM,IAAIC,IAAY,GAAGA,IAAIH,OAAOI,QAAQD;YAC1C,IAAIH,OAAOG,GAAGN,SAASA,MAAM;gBAC5BG,OAAOQ,OAAOL,GAAG;gBACjB,OAAOT;;;QAIT,OAAOA;;sBAURe,qBAAKb;;;;;QACJ,KAAKA;YACJ,OAAOF;;QAGRK,IAAMC,SAAwBN,KAAKO,QAAQL,SAAS;QACpDG,IAAMW,MAAqB;QAE3B,KAAKR,IAAIC,IAAYH,OAAOI,SAAS,GAAGD,KAAK,GAAGA,KAAK;YACpDJ,IAAMY,KAAoBX,OAAOG;YAEjC,IAAIQ,GAAGb;gBACNE,OAAOQ,OAAOL,GAAG;;YAGlBO,IAAIL,KAAKM;;QAGV,KAAKT,IAAIC,MAAYO,IAAIN,SAAS,GAAGD,OAAK,GAAGA;YAC5CO,IAAIP,KAAGN,KAAKe,MAAMlB,MAAMmB;;QAGzB,OAAOnB;;sBAWRoB,uBAAMlB,MAAcmB;;;;;QACnB,KAAKnB,QAAmB,QAAXmB;YACZ,OAAOrB;;QAGRK,IAAMC,SAAwBN,KAAKO,QAAQL,SAAS;QACpDG,IAAMW,MAAqB;QAE3B,KAAKR,IAAIC,IAAYH,OAAOI,SAAS,GAAGD,KAAK,GAAGA,KAAK;YACpDJ,IAAMY,KAAoBX,OAAOG;YAEjC,IAAIQ,GAAGb;gBACNE,OAAOQ,OAAOL,GAAG;;YAGlBO,IAAIL,KAAKM;;QAGV,KAAKT,IAAIC,MAAYO,IAAIN,SAAS,GAAGD,OAAK,GAAGA;YAC5CO,IAAIP,KAAGN,KAAKe,MAAMG,SAASF;;QAG5B,OAAOnB;;sBASRsB,uBAAMpB;;mBAAe;;QACpB,IAAIF,KAAKO,QAAQL;YAChBF,KAAKO,QAAQL,QAAQ;;YAErBF,KAAKO,UAAU;;QAGhB,OAAOP;;;"}