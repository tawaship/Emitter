{"version":3,"file":"Emitter.esm.js","sources":["../src/Emitter.ts"],"sourcesContent":["\r\ninterface IEmitterEvent {\r\n\tfunc: Function,\r\n\tonce: boolean\r\n}\r\n\r\ntype EmitterEvents = IEmitterEvent[];\r\n\r\n/**\r\n * @interface IEmitterEvent\r\n * @memberof Emitter~\r\n * @property func {Function}\r\n * @property once {boolean}\r\n */\r\n\r\n/**\r\n * @typedef EmitterEvents {Emitter~IEmitterEvent[]}\r\n * @memberof Emitter~\r\n */\r\n\r\n/**\r\n * @class\r\n */\r\nexport default class Emitter {\r\n\t/**\r\n\t * @member {Object<string, Emitter~EmitterEvents>}\r\n\t * @private\r\n\t */\r\n\tprivate _events: { [type: string]: EmitterEvents } = {};\r\n\t\r\n\t/**\r\n\t * @property {string[]}\r\n\t * @readonly\r\n\t */\r\n\tget eventNames(): string[] {\r\n\t\treturn Object.keys(this._events);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Register event.\r\n\t * \r\n\t * @private\r\n\t * @param {string} type Event type.\r\n\t * @param {Function} func Callback when the event fires.\r\n\t * @param {boolean} once Whether one-time event.\r\n\t * @return {Emitter} Returns itself for the method chaining.\r\n\t */\r\n\tprivate _on(type: string, func: Function, once: boolean): Emitter {\r\n\t\tif (!type || !func) {\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\t\r\n\t\tconst events: EmitterEvents = this._events[type] = this._events[type] || [];\r\n\t\t\r\n\t\tfor (let i: number = 0; i < events.length; i++) {\r\n\t\t\tif (events[i].func === func) {\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tevents.push({ func, once });\r\n\t\t\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Register event.\r\n\t * \r\n\t * @param {string} type Event type.\r\n\t * @param {Function} func Callback when the event fires.\r\n\t * @return {Emitter} Returns itself for the method chaining.\r\n\t */\r\n\ton(type: string, func: Function): Emitter {\r\n\t\treturn this._on(type, func, false);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Register one-time event.\r\n\t * \r\n\t * @param {string} type Event type.\r\n\t * @param {Function} func Callback when the event fires.\r\n\t * @return {Emitter} Returns itself for the method chaining.\r\n\t */\r\n\tonce(type: string, func: Function): Emitter {\r\n\t\treturn this._on(type, func, true);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Unregister event.\r\n\t * \r\n\t * @param {string} type Event type.\r\n\t * @param {Function} func Registered callback.\r\n\t * @return {Emitter} Returns itself for the method chaining.\r\n\t */\r\n\toff(type: string, func: Function): Emitter {\r\n\t\tif (!type || !func) {\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\t\r\n\t\tconst events: EmitterEvents = this._events[type] || [];\r\n\t\t\r\n\t\tfor (let i: number = 0; i < events.length; i++) {\r\n\t\t\tif (events[i].func === func) {\r\n\t\t\t\tevents.splice(i, 1);\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Emit event.\r\n\t * \r\n\t * @param {string} type Event type to emit.\r\n\t * @param {...any} [args] Argument(s) in callback.\r\n\t * @return {Emitter} Returns itself for the method chaining.\r\n\t */\r\n\temit(type: string, ...args: any[]): Emitter {\r\n\t\tif (!type) {\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\t\r\n\t\tconst events: EmitterEvents = this._events[type] || [];\r\n\t\tconst use: EmitterEvents = [];\r\n\t\t\r\n\t\tfor (let i: number = events.length - 1; i >= 0; i--) {\r\n\t\t\tconst ev: IEmitterEvent = events[i];\r\n\t\t\t\r\n\t\t\tif (ev.once) {\r\n\t\t\t\tevents.splice(i, 1);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tuse.push(ev);\r\n\t\t}\r\n\t\t\r\n\t\tfor (let i: number = use.length - 1; i >= 0; i--) {\r\n\t\t\tuse[i].func.apply(this, args);\r\n\t\t}\r\n\t\t\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Emit event with specifying a context.\r\n\t * \r\n\t * @param {string} type Event type to emit.\r\n\t * @param {any} context 'this' context in callback.\r\n\t * @param {...any} [args] Argument(s) in callback.\r\n\t * @return {Emitter} Returns itself for the method chaining.\r\n\t */\r\n\tcemit(type: string, context: any, ...args: any[]): Emitter {\r\n\t\tif (!type || context == null) {\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\t\r\n\t\tconst events: EmitterEvents = this._events[type] || [];\r\n\t\tconst use: EmitterEvents = [];\r\n\t\t\r\n\t\tfor (let i: number = events.length - 1; i >= 0; i--) {\r\n\t\t\tconst ev: IEmitterEvent = events[i];\r\n\t\t\t\r\n\t\t\tif (ev.once) {\r\n\t\t\t\tevents.splice(i, 1);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tuse.push(ev);\r\n\t\t}\r\n\t\t\r\n\t\tfor (let i: number = use.length - 1; i >= 0; i--) {\r\n\t\t\tuse[i].func.apply(context, args);\r\n\t\t}\r\n\t\t\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Remove events grouped event type.\r\n\t * \r\n\t * @param {string} [type=''] Event type to remove.<br>If it is empty, removes all events.\r\n\t * @return {Emitter} Returns itself for the method chaining.\r\n\t */\r\n\tclear(type: string = ''): Emitter {\r\n\t\tif (this._events[type]) {\r\n\t\t\tdelete(this._events[type]);\r\n\t\t} else {\r\n\t\t\tthis._events = {};\r\n\t\t}\r\n\t\t\r\n\t\treturn this;\r\n\t}\r\n}"],"names":[],"mappings":"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"}